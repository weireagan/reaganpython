{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled12.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyP61sj17W3m/3G9Zp+5rVZS",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/weireagan/reaganpython/blob/master/functional%20API\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dBqny4N7T30y",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense\n",
        "from tensorflow.keras.layers import Flatten\n",
        "\n",
        "from tensorflow.keras.layers import Conv2D, MaxPool2D, GlobalAveragePooling2D\n",
        "\n",
        "from tensorflow.keras.optimizers import SGD, Adam\n",
        "\n",
        "from tensorflow.keras import datasets\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.layers import Input"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JCdAP7GMU4lY",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "(X_train, y_train), (X_test, y_test) = datasets.fashion_mnist.load_data()\n",
        "(X_train, y_train0), (X_test, y_test0) = datasets.fashion_mnist.load_data()\n",
        "\n",
        "X_train = X_train.reshape(-1, 28*28)/ X_train.max()\n",
        "X_test = X_test.reshape(-1, 28*28)/ X_test.max()\n",
        "\n",
        "y_train = to_categorical(y_train0, 10)\n",
        "y_test = to_categorical(y_test0, 10)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QnMbPZiAUCaP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from tensorflow.keras.layers import concatenate, add"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KRW1dgNYVVa3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "x = Input(shape=(784,))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-8nM8kB3Urif",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "f_1 = Dense(600, activation='sigmoid')\n",
        "f_2 = Dense(500, activation='sigmoid')\n",
        "f_4 = Dense(300, activation='relu')\n",
        "f_3 = Dense(150, activation='relu')\n",
        "f_5 = Dense(10, activation='softmax')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qLfRKxZnUxz0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "g1 = f_1(x)\n",
        "g2 = f_2(g1)\n",
        "g3 = f_3(g2)\n",
        "z = f_4(g1) ##新增一層分歧\n",
        "t = concatenate([g2, z]) ##將分歧的合併 \n",
        "y = f_5(t)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jmKQ1zPDVbQs",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 380
        },
        "outputId": "01ce98ab-1f6a-4b03-80a3-e07f4f94b3c5"
      },
      "source": [
        "model = Model(x, y)\n",
        "model.summary()"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"model\"\n",
            "__________________________________________________________________________________________________\n",
            "Layer (type)                    Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            "input_1 (InputLayer)            [(None, 784)]        0                                            \n",
            "__________________________________________________________________________________________________\n",
            "dense_5 (Dense)                 (None, 600)          471000      input_1[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "dense_6 (Dense)                 (None, 500)          300500      dense_5[1][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "dense_7 (Dense)                 (None, 300)          180300      dense_5[1][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "concatenate_1 (Concatenate)     (None, 800)          0           dense_6[1][0]                    \n",
            "                                                                 dense_7[1][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "dense_9 (Dense)                 (None, 10)           8010        concatenate_1[0][0]              \n",
            "==================================================================================================\n",
            "Total params: 959,810\n",
            "Trainable params: 959,810\n",
            "Non-trainable params: 0\n",
            "__________________________________________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tqNS0DGzVzOr",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model.compile(loss='mae', \n",
        "              optimizer=Adam(), \n",
        "              metrics=['accuracy'])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bOfSOM1sV6Tk",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 380
        },
        "outputId": "c3b194a3-288b-4ccc-9a87-bc8541255338"
      },
      "source": [
        "model.fit(X_train, y_train, \n",
        "          batch_size=648, \n",
        "          epochs=10,\n",
        "          validation_data=(X_test, y_test))"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "93/93 [==============================] - 7s 70ms/step - loss: 0.0291 - accuracy: 0.8728 - val_loss: 0.0305 - val_accuracy: 0.8615\n",
            "Epoch 2/10\n",
            "93/93 [==============================] - 7s 70ms/step - loss: 0.0265 - accuracy: 0.8785 - val_loss: 0.0297 - val_accuracy: 0.8604\n",
            "Epoch 3/10\n",
            "93/93 [==============================] - 6s 70ms/step - loss: 0.0250 - accuracy: 0.8836 - val_loss: 0.0281 - val_accuracy: 0.8666\n",
            "Epoch 4/10\n",
            "93/93 [==============================] - 6s 70ms/step - loss: 0.0240 - accuracy: 0.8874 - val_loss: 0.0284 - val_accuracy: 0.8637\n",
            "Epoch 5/10\n",
            "93/93 [==============================] - 6s 70ms/step - loss: 0.0240 - accuracy: 0.8860 - val_loss: 0.0272 - val_accuracy: 0.8683\n",
            "Epoch 6/10\n",
            "93/93 [==============================] - 7s 70ms/step - loss: 0.0231 - accuracy: 0.8898 - val_loss: 0.0272 - val_accuracy: 0.8680\n",
            "Epoch 7/10\n",
            "93/93 [==============================] - 6s 70ms/step - loss: 0.0229 - accuracy: 0.8906 - val_loss: 0.0262 - val_accuracy: 0.8730\n",
            "Epoch 8/10\n",
            "93/93 [==============================] - 7s 70ms/step - loss: 0.0221 - accuracy: 0.8938 - val_loss: 0.0262 - val_accuracy: 0.8740\n",
            "Epoch 9/10\n",
            "93/93 [==============================] - 7s 70ms/step - loss: 0.0218 - accuracy: 0.8954 - val_loss: 0.0271 - val_accuracy: 0.8681\n",
            "Epoch 10/10\n",
            "93/93 [==============================] - 7s 70ms/step - loss: 0.0220 - accuracy: 0.8940 - val_loss: 0.0261 - val_accuracy: 0.8732\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7fc3c775c5f8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fQIHZ1H0WAEb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model.save_weights('MNIST_Model.')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O-CRrM3sXKSJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}